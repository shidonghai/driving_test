package com.assistant.drivingtest.logic;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import java.util.Random;import org.json.JSONArray;import org.json.JSONObject;import android.content.Context;import android.content.res.AssetFileDescriptor;import android.content.res.AssetManager;import android.media.MediaPlayer;import android.media.MediaPlayer.OnCompletionListener;import android.media.MediaPlayer.OnErrorListener;import android.os.Handler;import android.os.HandlerThread;import android.os.Looper;import android.os.Message;import android.text.TextUtils;public class ThirdTestItemManager {	private static final int PLAY_NEXT = 0;	private static final int PLAY_DELAY = 4 * 1000;	private static ThirdTestItemManager mInstance;	private List<TestItem> mTestItems = new ArrayList<ThirdTestItemManager.TestItem>();	private Object mClock = new Object();	private LinkedList<String> mLightList = new LinkedList<String>();	private ThreadHandler mHandler;	private MediaPlayer mPlayer;	private Context mContext;		private ILightTest mLightTestListener;	private ThirdTestItemManager() {	}	public static ThirdTestItemManager getInstace() {		if (null == mInstance) {			mInstance = new ThirdTestItemManager();		}		return mInstance;	}	public void init(Context context) {		if (null == context) {			return;		}		synchronized (mClock) {			mTestItems.clear();			AssetManager assetManager = context.getAssets();			try {				InputStream inputStream = assetManager						.open("third/third_subject.txt");				BufferedReader reader = new BufferedReader(						new InputStreamReader(inputStream));				String json = reader.readLine();				if (TextUtils.isEmpty(json)) {					return;				}				JSONArray jsonArray = new JSONArray(json);				TestItem testItem;				JSONObject jsonObject;				for (int i = 0; i < jsonArray.length(); i++) {					jsonObject = jsonArray.getJSONObject(i);					testItem = new TestItem();					testItem.type = jsonObject.optInt("type");					testItem.name = jsonObject.optString("name");					testItem.voice = jsonObject.optString("voice");					testItem.hasStart = jsonObject.getBoolean("hasStart");					mTestItems.add(testItem);				}			} catch (Exception e) {				e.printStackTrace();			}		}	}	public List<TestItem> getTestItems() {		synchronized (mClock) {			return mTestItems;		}	}	public synchronized void startLightTest(Context context) {		mContext = context;		if (null != mHandler) {			mHandler.removeMessages(PLAY_NEXT);			mHandler.getLooper().quit();		}		if (null != mPlayer) {			mPlayer.release();			mPlayer = null;		}		HandlerThread thread = new HandlerThread("light_thread");		thread.start();		mHandler = new ThreadHandler(thread.getLooper());		mLightList.clear();		mLightList.add("third/light/lgnition.wav");		mLightList.add("third/light/night_driving.wav");		mLightList.add("third/light/mndg1.wav");		mLightList.add("third/light/mndg2.wav");		Random random = new Random();		int r = random.nextInt(4) + 3;		String string = "third/light/mndg%d.wav";		mLightList.add(String.format(string, r));		mLightList.add("third/light/mndg2.wav");		r = random.nextInt(2) + 7;		mLightList.add(String.format(string, r));		mLightList.add("third/light/night_driving_completed.wav");		mLightList.add("third/light/parking_starting.wav");		mHandler.sendEmptyMessage(PLAY_NEXT);	}	public class TestItem {		public int type;		public String name;		public String voice;		public boolean hasStart;	}	public class Type {		public static final int SCHOOL = 0; // 通过学习区域		public static final int BUS_STATION = 1; // 通过公交站台		public static final int CROSSWALK = 2; // 通过人行横道		public static final int CHANGE_LINE = 3; // 变更车道		public static final int DRIVING_STRAIGHT = 4; // 直线行驶		public static final int OVERTAKE = 5; // 超车		public static final int GEAR_OPERATION = 6; // 加减挡位操作		public static final int INTERSECTION_STRAIGHT = 7; // 路口直行		public static final int PULL_OVER = 8; // 靠边停车		public static final int TURN_LEFT = 9; // 路口左转		public static final int U_TURN = 10; // 掉头		public static final int TURN_RIGHT = 11; // 路口右转		public static final int START = 12; // 起点		public static final int END = 13;	}	private void playLightVoice(String voice) {		if (null == mPlayer) {			mPlayer = new MediaPlayer();			mPlayer.setOnCompletionListener(new OnCompletionListener() {				@Override				public void onCompletion(MediaPlayer mp) {					mHandler.sendEmptyMessageDelayed(PLAY_NEXT, PLAY_DELAY);				}			});			mPlayer.setOnErrorListener(new OnErrorListener() {				@Override				public boolean onError(MediaPlayer mp, int what, int extra) {					return false;				}			});		} else {			mPlayer.reset();		}		try {			AssetFileDescriptor fileDescriptor = mContext.getAssets().openFd(					voice);			mPlayer.setDataSource(fileDescriptor.getFileDescriptor(),					fileDescriptor.getStartOffset(), fileDescriptor.getLength());			mPlayer.prepare();			mPlayer.start();		} catch (IllegalArgumentException e) {			e.printStackTrace();		} catch (IllegalStateException e) {			e.printStackTrace();		} catch (IOException e) {			e.printStackTrace();		}	}		public void setLightTestListener(ILightTest lightTest) {		mLightTestListener = lightTest;	}	private class ThreadHandler extends Handler {		public ThreadHandler(Looper looper) {			super(looper);		}		@Override		public void handleMessage(Message msg) {			super.handleMessage(msg);			switch (msg.what) {			case PLAY_NEXT:				if (mLightList.size() == 0) {					mPlayer.release();					mPlayer = null;					mContext = null;					mHandler.getLooper().quit();					mHandler = null;										if (null != mLightTestListener) {						mLightTestListener.onLightComplete();					}				} else {					playLightVoice(mLightList.pollFirst());				}				break;			default:				break;			}		}	}	public synchronized void stopLightTest() {		if (null != mHandler) {			mHandler.removeMessages(PLAY_NEXT);			mHandler.getLooper().quit();			mHandler = null;		}		if (null != mPlayer) {			mPlayer.release();			mPlayer = null;		}		mContext = null;	}		public interface ILightTest {		void onLightComplete();	}}