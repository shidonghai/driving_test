package com.assistant.drivingtest.logic.test;import android.content.Context;import com.assistant.drivingtest.R;import com.assistant.drivingtest.domain.Deduction;import com.assistant.drivingtest.domain.ThirdTestItem;import com.assistant.drivingtest.logic.ThirdSubjectTestManager;import com.assistant.drivingtest.utils.Constant;import com.assistant.drivingtest.utils.MapUtil;import com.baidu.mapapi.map.LocationData;public class TurnTestObject extends TestObject {	private double mSpeed;	private boolean mNeedAzimuth;	public TurnTestObject(Context context, ThirdSubjectTestManager testManager,			ThirdTestItem item, boolean needAzimuth) {		super(context, testManager, item);		mStart = false;		mKeepDirection = true;		mNeedAzimuth = needAzimuth;		checkDirection();	}	@Override	public void setAzimuth(double azimuth) {		if (!mNeedAzimuth) {			return;		}		if (Math.abs(azimuth) > Constant.CHANGE_LINE && mKeepDirection) {			Deduction deduction = new Deduction();			deduction.name = mTestItem.name;			deduction.reason = mContext					.getString(R.string.deduction_message_keep_direction);			deduction.scores = -10;			mTestManager.addDeduction(deduction);			mKeepDirection = false;		}	}	@Override	public void setLocation(LocationData locationData) {		int dis = MapUtil.getDistanceInt(locationData.latitude,				locationData.longitude, mTestItem.startLatitude,				mTestItem.startLongitude);		int disEnd = MapUtil.getDistanceInt(locationData.latitude,				locationData.longitude, mTestItem.endLatitude,				mTestItem.endLongitude);		if (dis > mTestItem.distance) {			mHandler.removeMessages(FAIL);			Deduction deduction = new Deduction();			deduction.name = mTestItem.name;			deduction.reason = mContext.getString(R.string.deduction_message);			deduction.scores = -100;			mTestManager.testFail(deduction);		} else if (dis <= Constant.DISTANCE_OK) {			if (mSpeed > mTestItem.speed) {				Deduction deduction = new Deduction();				deduction.name = mTestItem.name;				deduction.reason = mContext						.getString(R.string.deduction_message_turn_speed);				deduction.scores = -100;				mTestManager.testFail(deduction);			}		}		if (disEnd <= Constant.DISTANCE_OK) {			mTestManager.testSuccess();		}	}	@Override	public void setSpeed(double speed) {		mSpeed = speed;	}}