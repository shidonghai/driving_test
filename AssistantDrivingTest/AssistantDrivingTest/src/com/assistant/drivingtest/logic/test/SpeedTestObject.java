package com.assistant.drivingtest.logic.test;import android.content.Context;import android.os.Handler;import com.assistant.drivingtest.R;import com.assistant.drivingtest.domain.Deduction;import com.assistant.drivingtest.domain.ThirdTestItem;import com.assistant.drivingtest.logic.ThirdSubjectTestManager;import com.assistant.drivingtest.utils.Constant;import com.assistant.drivingtest.utils.LogUtil;import com.assistant.drivingtest.utils.MapUtil;import com.baidu.mapapi.map.LocationData;public class SpeedTestObject extends TestObject {	private boolean mCheckSpeed;	private double mSpeed;	private double mOverSpeed;	private Handler mSpeedHandler = new Handler() {		public void handleMessage(android.os.Message msg) {			if (mSpeed >= mOverSpeed) {				mHandler.removeMessages(SUCCESS);				Deduction deduction = new Deduction();				deduction.name = mTestItem.name;				deduction.reason = mContext						.getString(R.string.deduction_message_speed);				deduction.scores = -100;				mTestManager.testFail(deduction);			}		};	};	public SpeedTestObject(Context context,			ThirdSubjectTestManager testManager, ThirdTestItem item,			boolean isManual) {		super(context, testManager, item, isManual);	}	@Override	public void setAzimuth(double azimuth) {	}	@Override	public void setLocation(LocationData locationData) {		if (mIsManual) {			if (null == mLocationData) {				mLocationData = new LocationData();				mLocationData.latitude = locationData.latitude;				mLocationData.longitude = locationData.longitude;			}			int dis = MapUtil.getDistanceInt(locationData.latitude,					locationData.longitude, mLocationData.latitude,					mLocationData.longitude);			if (dis > Constant.MANUAL_DISTANCE) {				mTestManager.testSuccess();			}			mTestManager.setDistance(dis);		} else {			int dis = MapUtil.getDistanceInt(locationData.latitude,					locationData.longitude, mTestItem.voiceLatitude,					mTestItem.voiceLongitude);			int disEnd = MapUtil.getDistanceInt(locationData.latitude,					locationData.longitude, mTestItem.endLatitude,					mTestItem.endLongitude);			if (dis > mTestItem.distance) {				mHandler.removeMessages(FAIL);				Deduction deduction = new Deduction();				deduction.name = mTestItem.name;				deduction.reason = mContext						.getString(R.string.deduction_message_speed);				deduction.scores = -100;				mTestManager.testFail(deduction);			} else if (disEnd <= Constant.DISTANCE_OK) {				mTestManager.testSuccess();			}		}	}	@Override	public void setSpeed(double speed) {		LogUtil.d("SpeedTestObject", "current speed:" + speed				+ " mTestItem speed:" + mTestItem.speed);		mSpeed = speed;		if (speed > mTestItem.speed && !mCheckSpeed) {			mCheckSpeed = true;			mOverSpeed = speed;			mSpeedHandler.sendEmptyMessageDelayed(0, 2 * 1000);		}	}}